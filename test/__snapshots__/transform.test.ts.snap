// Vitest Snapshot v1

exports[`transform > fixtures > playground/src/App.vue 1`] = `
"<script lang=\\"ts\\">
import { defineAsyncComponent } from '@vue/composition-api';
import HelloWorld from './HelloWorld.vue';
const AsyncComponent = defineAsyncComponent(() => import('./Async.vue'));
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  function onUpdate(e: any) {
    // eslint-disable-next-line no-console
    console.log(e);
  }

  return {
    onUpdate
  };
};

__sfc_main.components = Object.assign({
  HelloWorld,
  AsyncComponent
}, __sfc_main.components);
export default __sfc_main;
</script>
<template>
  <div>
    <HelloWorld name=\\"Vue 2\\" @update=\\"onUpdate\\" />

    <AsyncComponent />
  </div>
</template>
"
`;

exports[`transform > fixtures > playground/src/Async.vue 1`] = `
"<template>
  <div>Async Component</div>
</template>
"
`;

exports[`transform > fixtures > playground/src/Bar.vue 1`] = `
"<template>
  <div>Bar</div>
</template>
"
`;

exports[`transform > fixtures > playground/src/Foo.vue 1`] = `
"<template>
  <div>Foo</div>
</template>
"
`;

exports[`transform > fixtures > playground/src/HelloWorld.vue 1`] = `
"
<script lang=\\"ts\\">
import { ref as _ref, computed as _computed } from \\"@vue/composition-api\\";
import { watch } from '@vue/composition-api';
import Foo from './Foo.vue';
import Bar from './Bar.vue';
const __sfc_main = {
  name: 'App'
};
__sfc_main.props = {
  msg: {
    key: \\"msg\\",
    required: false,
    type: String,
    default: 'Hello'
  },
  name: {
    key: \\"name\\",
    required: true,
    type: [String, Number]
  }
};

__sfc_main.setup = (__props, __ctx) => {
  const emit = __ctx.emit;

  let count = _ref(0); // eslint-disable-next-line prefer-const


  let doubled = _computed(() => count.value * 2);

  function inc() {
    count.value += 1;
  }

  function dec() {
    count.value -= 1;
  }

  const decText = '<b>Dec</b>';
  watch(count.value, value => emit('update', value));
  return {
    Foo,
    Bar,
    count,
    doubled,
    inc,
    dec,
    decText
  };
};

export default __sfc_main;
</script>
<template>
  <div>
    <h3>{{ msg }}, {{ name }}</h3>
    <button @click=\\"inc\\">
      Inc
    </button>
    <div>{{ count }} x 2 = {{ doubled }}</div>
    <button @click=\\"dec()\\" v-html=\\"decText\\" />
    <component :is=\\"count > 2 ? Foo : Bar\\" />
  </div>
</template>
"
`;

exports[`transform > fixtures > playground/src/main.ts 1`] = `
"import Vue from 'vue'
import VueCompositionAPI, { createApp, h } from '@vue/composition-api'
import App from './App.vue'

Vue.use(VueCompositionAPI)

const app = createApp({ render: () => h(App) })

app.mount('#app')
"
`;

exports[`transform > fixtures > playground/src/shims-vue.d.ts 1`] = `
"/// <reference types=\\"@minar-kotonoha/unplugin-vue2-script-setup-sync/shims.js\\" />
/// <reference types=\\"@minar-kotonoha/unplugin-vue2-script-setup-sync/ref-macros.js\\" />
"
`;

exports[`transform > fixtures > test/fixtures/AsyncImport.vue 1`] = `
"<script lang=\\"ts\\">
import { defineAsyncComponent } from '@vue/composition-api';
const ScriptOnly = defineAsyncComponent(() => import('./ScriptOnly.vue'));
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  return {};
};

__sfc_main.components = Object.assign({
  ScriptOnly
}, __sfc_main.components);
export default __sfc_main;
</script>

<template>
  <ScriptOnly />
</template>
"
`;

exports[`transform > fixtures > test/fixtures/ComponentsDirectives.vue 1`] = `
"<template>
  <div>
    <FooView
      v-if=\\"now > 0\\"
      ref=\\"fooView\\"
      v-foo-bar=\\"message0\\"
      v-d0-demo:foo.a.b=\\"message1\\"
      v-d1-modifiers.a=\\"message2\\"
      v-d2-modifiers-no-value.b.c
      v-d3-arg:click=\\"message3\\"
      v-d4-arg-no-value:click
      v-d5-arg-dynamic:[direction1+direction2.length].c=\\"message4\\"
      v-d6-arg-dynamic-no-value:[direction3]
      v-d6-arg-dynamic-no-value:shouldNotUsed
    >
      <template #[slotName]=\\"{ foo = 1 }\\">
        <div>
          good {{ foo }}
        </div>
      </template>
      <template v-slot:default=\\"bar\\">
        <div>
          good {{ bar }}
        </div>
      </template>
    </FooView>
    <button v-else-if=\\"now === 0\\" :[propNamePrefix+propName]=\\"1\\" @[eventPrefix.value+eventName]=\\"console.log($event)\\"></button>
    <router-view v-else></router-view>
    <img src=\\"https://vuejs.org/images/logo.svg\\">
  </div>
</template>

<script lang=\\"ts\\">
import { ref } from '@vue/runtime-dom';
import FooView from './FooView.vue';
import { vFooBar, vDemo as vD0Demo, vD1Modifiers, vD2ModifiersNoValue, vD3Arg, vD4ArgNoValue, vD5ArgDynamic, vD6ArgDynamicNoValue } from './directive';
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const fooView = ref<null | InstanceType<typeof FooView>>(null);
  const message0 = ref('hello');
  const message1 = ref('hello');
  const message2 = ref('hello');
  const message3 = ref('hello');
  const message4 = ref('hello');
  const direction1 = ref('top');
  const direction2 = ref('top');
  const direction3 = ref('top');
  const shouldNotUsed = ref('');
  const propNamePrefix = 'vue-';
  const propName = 'color';
  const eventPrefix = {
    value: 'vue-'
  };
  const eventName = '';
  const console = globalThis.console;
  const now = Date.now();
  const slotName = 'footer';
  return {
    fooView,
    message0,
    message1,
    message2,
    message3,
    message4,
    direction1,
    direction2,
    direction3,
    propNamePrefix,
    propName,
    eventPrefix,
    eventName,
    console,
    now,
    slotName
  };
};

__sfc_main.components = Object.assign({
  FooView
}, __sfc_main.components);
__sfc_main.directives = Object.assign({
  fooBar: vFooBar,
  d0Demo: vD0Demo,
  d1Modifiers: vD1Modifiers,
  d2ModifiersNoValue: vD2ModifiersNoValue,
  d3Arg: vD3Arg,
  d4ArgNoValue: vD4ArgNoValue,
  d5ArgDynamic: vD5ArgDynamic,
  d6ArgDynamicNoValue: vD6ArgDynamicNoValue
}, __sfc_main.directives);
export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/ComponentsDirectivesLocal.vue 1`] = `
"
<script lang=\\"ts\\">
import type { ObjectDirective } from '@vue/composition-api'; // enables v-focus in templates

const vFocus: ObjectDirective<HTMLInputElement, null> = {
  inserted: (el, binding, vnode, oldVnode) => {
    el.focus();
  }
};
const __sfc_main = {};
__sfc_main.directives = Object.assign({
  focus: vFocus
}, __sfc_main.directives);
export default __sfc_main;
</script>
<template>
  <input v-focus=\\"null\\">
</template>
"
`;

exports[`transform > fixtures > test/fixtures/ComponentsLocal.vue 1`] = `
"
<script lang=\\"tsx\\">
const HelloComponent = ({
  name
}: {
  name: string;
}) => <span>Hello, {name}</span>;

const __sfc_main = {};
__sfc_main.components = Object.assign({
  HelloComponent
}, __sfc_main.components);
export default __sfc_main;
</script>
<template>
  <HelloComponent name=\\"Evan You\\" />
</template>
"
`;

exports[`transform > fixtures > test/fixtures/DynamicStyle.vue 1`] = `
"<template>
  <div :style=\\"{ color, border: '1px' }\\" />
</template>

<script lang=\\"ts\\">
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const color = computed(() => 'red');
  return {
    color
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/Empty.vue 1`] = `""`;

exports[`transform > fixtures > test/fixtures/Enum.vue 1`] = `
"<template>
  <div>{{ MyEnum }}</div>
</template>

<script lang=\\"ts\\">
enum MyEnum {
  test = 'true',
}
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  return {
    MyEnum
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/JSLongComment.vue 1`] = `
"<script lang=\\"ts\\">
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const a = 1; ////////////////

  return {
    a
  };
};

export default __sfc_main;
</script>
<template>
  <div>{{ a }}</div>
</template>
"
`;

exports[`transform > fixtures > test/fixtures/Macros.vue 1`] = `
"<template>
  <div @click=\\"emit(props.msg)\\">{{ msg }}</div>
</template>

<script lang=\\"js\\">
const __sfc_main = {};
__sfc_main.props = {
  msg: String
};

__sfc_main.setup = (__props, __ctx) => {
  const props = __props;
  const emit = __ctx.emit;
  return {
    props,
    emit
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/MacrosDefineExpose.vue 1`] = `
"<template>
  <div>{{ a }}</div>
  <div>{{ text?.length ?? textLengthDefault }}</div>
</template>

<script lang=\\"ts\\">
import { ref } from '@vue/composition-api';
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const a = ref(1);
  const b = 1;
  const text = 'hello';
  const textLengthDefault = 0;
  return Object.assign({
    a,
    text,
    textLengthDefault
  }, {
    b
  });
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/MacrosPure.vue 1`] = `
"<template>
  <div>{{ msg }}</div>
</template>

<script >
const __sfc_main = {};
__sfc_main.props = {
  msg: String
};
export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/MacrosType.vue 1`] = `
"<template>
  <div @click=\\"emit('update', props.msg)\\">
    {{ msg }}
  </div>
</template>

<script lang=\\"ts\\">
const __sfc_main = {};
__sfc_main.props = {
  msg: {
    key: \\"msg\\",
    required: false,
    type: String,
    default: 'Hello'
  },
  value: {
    key: \\"value\\",
    required: true,
    type: [Number, String]
  },
  data: {
    key: \\"data\\",
    required: false,
    type: Object
  }
};

__sfc_main.setup = (__props, __ctx) => {
  const props = __props;
  const emit = __ctx.emit;
  return {
    props,
    emit
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/MacrosType2.vue 1`] = `
"<template>
  <div @click=\\"emit(props.msg)\\">
    {{ msg }}
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  msg: string;
  value: number | string;
  data?: {
    value: boolean;
  };
  arr?: [number, string, {}];
  any: any;
}
const __sfc_main = {};
__sfc_main.props = {
  msg: {
    key: \\"msg\\",
    required: false,
    type: String,
    default: 'Hello'
  },
  value: {
    key: \\"value\\",
    required: true,
    type: [Number, String]
  },
  data: {
    key: \\"data\\",
    required: false,
    type: Object
  },
  arr: {
    key: \\"arr\\",
    required: false,
    type: Array
  },
  any: {
    key: \\"any\\",
    required: true,
    type: null
  }
};

__sfc_main.setup = (__props, __ctx) => {
  const props = __props;
  const emit = __ctx.emit;
  return {
    props,
    emit
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/MacrosType3.vue 1`] = `
"<template>
  <div @click=\\"emit('update', msg);emit('update', msg + value);\\">
    {{ msg }}
  </div>
</template>

<script lang=\\"ts\\">
const __sfc_main = {};
__sfc_main.props = {
  msg: {
    key: \\"msg\\",
    required: false,
    type: String,
    default: 'Hello'
  },
  value: {
    key: \\"value\\",
    required: true,
    type: [Number, String]
  },
  data: {
    key: \\"data\\",
    required: false,
    type: Object
  }
};

__sfc_main.setup = (__props, __ctx) => {
  const emit = __ctx.emit;
  const value = 'bar';
  return {
    emit,
    value
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/MacrosType4.vue 1`] = `
"<script lang=\\"ts\\">
type Test = number[];
const __sfc_main = {};
__sfc_main.props = {
  test: {
    key: \\"test\\",
    required: false,
    type: null,
    default: () => []
  }
};

__sfc_main.setup = (__props, __ctx) => {
  return {};
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/MacrosTypeAny.vue 1`] = `
"<template>
  <div>
    {{ value }}
  </div>
</template>

<script lang=\\"ts\\">
const __sfc_main = {};
__sfc_main.props = {
  value: {
    key: \\"value\\",
    required: true,
    type: null
  }
};

__sfc_main.setup = (__props, __ctx) => {
  const props = __props;
  return {};
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/Object1.vue 1`] = `
"<template>
  <div>
    {{ data }} {{ title }}
  </div>
</template>

<script lang=\\"ts\\">
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const data = {
    title: 'Template Only'
  };
  return {
    data
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/ObjectDestructure.vue 1`] = `
"<template>
  <div></div>
</template>

<script >
import { toRefs, reactive } from 'vue';
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const state = reactive({
    data: 'hello'
  });
  const {
    data
  } = toRefs(state);
  return {};
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/Pug1.vue 1`] = `
"<template lang=\\"pug\\">
.root
  span {{ data }} {{ title }}
  .p-1(@click=\\"foo\\")
</template>

<script lang=\\"ts\\">
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const data = {
    title: 'Template Only'
  };

  function foo() {}

  return {
    data,
    foo
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/RefSugar.ts 1`] = `
"import { ref as _ref, computed as _computed } from '@vue/composition-api'
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable prefer-const */
import { ref } from '@vue/composition-api'

let ref1 = (ref('hello'))
ref1.value = 'world'
let ref1Raw = (ref1)

let ref2 = _ref('hello')
ref2.value = 'world'
let ref2Raw = (ref2)

let computed1 = _computed(() => ref2.value += ' str')
let computed1Raw = (computed1)
"
`;

exports[`transform > fixtures > test/fixtures/RefSugar.vue 1`] = `
"<template>
  <div>
    {{ msg }}
    {{ msg2 }}
    {{ a }}
  </div>
</template>



<script lang=\\"ts\\">
import { ref as _ref } from \\"@vue/composition-api\\";

/* eslint-disable prefer-const */
import { defineComponent, ref } from '@vue/composition-api';

const __sfc_main = defineComponent({
  setup() {
    let msg = ref('hello world');
    return {
      msg: msg.value,
      msgRef: msg
    };
  }

});

__sfc_main.setup = (__props, __ctx) => {
  let msg2 = _ref('hello world');

  let a: number;
  a = 2;
  return {
    msg2,
    a
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/RefSugarScriptSetup.vue 1`] = `
"<template>
  <div>
    {{ msg }}
  </div>
</template>

<script lang=\\"ts\\">
import { ref as _ref } from \\"@vue/composition-api\\";
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  /* eslint-disable prefer-const */
  let msg = _ref('hello world');

  return {
    msg
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/ScriptLessThanOrEqualTo.vue 1`] = `
"<script lang=\\"ts\\">
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const val: boolean = 1 <= 2;
  return {
    val
  };
};

export default __sfc_main;
</script>

<template>
  <div>{{ val }}</div>
</template>
"
`;

exports[`transform > fixtures > test/fixtures/ScriptOnly.vue 1`] = `
"<script lang=\\"ts\\">
// <script setup> in comment should not be matched
import { defineComponent } from '@vue/composition-api';

const __sfc_main = defineComponent({
  name: 'Hi'
});

export default __sfc_main;
</script>


<!-- <script setup> -->
"
`;

exports[`transform > fixtures > test/fixtures/TemplateOnly.vue 1`] = `
"<template>
  <div>
    <div v-for=\\"(item, index) in items\\" :key=\\"item\\">
      {{ index }}: {{ item }}
    </div>
  </div>
</template>

<script lang=\\"ts\\">
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const items = [{
    name: 'Item 1',
    value: 1
  }, {
    name: 'Item 2',
    value: 2
  }, {
    name: 'Item 3',
    value: 3
  }, {
    name: 'Item 4',
    value: 4
  }];
  return {
    items
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/TemplateOptionalChaining.vue 1`] = `
"<template>
  <div @click=\\"callback?.()\\">
    {{ text?.length ?? textLengthDefault?.[index] }}
    {{ classes?.[0] }}
    {{ arrayObj.data.value[i] }}
  </div>
</template>

<script lang=\\"ts\\">
import { ref } from '@vue/composition-api';
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const text = 'hello';
  const textLengthDefault = '';
  const index = ref(0);
  const callback = (undefined as undefined | (() => void));
  const classes = (undefined as undefined | string[]);
  const arrayObj = {
    data: {
      value: [1, 2, 3]
    }
  };
  const i = 0;
  return {
    text,
    textLengthDefault,
    index,
    callback,
    classes,
    arrayObj,
    i
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/VFor.vue 1`] = `
"<template>
  <div>
    <div v-for=\\"(item, index) in items\\" :key=\\"item\\">
      {{ item }}
    </div>
    <div v-for=\\"{ cargo_key, in_of } in items2\\">
      {{ cargo_key }}
    </div>
  </div>
</template>

<script lang=\\"ts\\">
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const items = [{
    name: 'Item 1',
    value: 1
  }, {
    name: 'Item 2',
    value: 2
  }, {
    name: 'Item 3',
    value: 3
  }, {
    name: 'Item 4',
    value: 4
  }];
  const items2 = [{
    cargo_key: 'cargo_key',
    in_of: 'in'
  }];
  const index = 0;
  return {
    items,
    items2
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform > fixtures > test/fixtures/VariableBinding.vue 1`] = `
"<script lang=\\"ts\\">
/* eslint-disable no-console */
import { reactive } from '@vue/composition-api';
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const state = reactive({
    value: ''
  });

  function showEvent(event: MouseEvent) {
    console.log(event);
  }

  const emit = __ctx.emit;
  return {
    state,
    showEvent,
    emit
  };
};

export default __sfc_main;
</script>
<template>
  <div
    @click=\\"
      state.value = \`x: \${$event.x}\`
      showEvent($event)
      emit('foo')
    \\"
  >
    2333
  </div>
</template>
"
`;
